package com.github.vokorm

import com.github.mvysny.dynatest.DynaNodeGroup
import com.gitlab.mvysny.jdbiorm.*
import com.zaxxer.hikari.HikariConfig
import com.zaxxer.hikari.HikariDataSource
import org.hibernate.validator.constraints.Length
import org.intellij.lang.annotations.Language
import org.jdbi.v3.core.mapper.reflect.ColumnName
import org.testcontainers.containers.MariaDBContainer
import org.testcontainers.containers.MySQLContainer
import org.testcontainers.containers.PostgreSQLContainer
import java.time.Instant
import java.time.LocalDate
import java.util.*

/**
 * A test table that tests the most basic cases. The ID is auto-generated by the database.
 */
@Table("Test")
data class Person(
        override var id: Long? = null,
        @field:Length(min = 1)
        var name: String = "",
        var age: Int = -1,
        @Ignore var ignored: String? = null,
        @Transient var ignored2: Any? = null,
        var dateOfBirth: LocalDate? = null,
        var created: Date? = null,
        var modified: Instant? = null,
    // test of aliased field
        @field:ColumnName("alive")
    var isAlive25: Boolean? = null,
        var maritalStatus: MaritalStatus? = null

) : KEntity<Long> {

    override fun save(validate: Boolean) {
        if (id == null) {
            if (created == null) created = java.sql.Timestamp(System.currentTimeMillis())
            if (modified == null) modified = Instant.now().withZeroNanos
        }
        super.save(validate)
    }

    // should not be persisted into the database since it's not backed by a field.
    fun getSomeComputedValue(): Int = age + 2

    // should not be persisted into the database since it's not backed by a field.
    val someOtherComputedValue: Int get() = age

    companion object : Dao<Person, Long>(Person::class.java) {
        val IGNORE_THIS_FIELD: Int = 0
    }
}

enum class MaritalStatus {
    Single,
    Married,
    Divorced,
    Widowed
}

/**
 * Tests for https://github.com/mvysny/vok-orm/issues/7
 */
data class EntityWithAliasedId(
        @field:ColumnName("myid")
        override var id: Long? = null,
        var name: String = ""
) : KEntity<Long> {
    companion object : Dao<EntityWithAliasedId, Long>(EntityWithAliasedId::class.java)
}

/**
 * A table demoing natural person with government-issued ID (birth number, social security number, etc).
 */
data class NaturalPerson(override var id: String? = null, var name: String = "", var bytes: ByteArray = byteArrayOf()) : KEntity<String> {
    companion object : Dao<NaturalPerson, String>(NaturalPerson::class.java)
}

interface UuidEntity : KEntity<UUID> {
    override fun create(validate: Boolean) {
        id = UUID.randomUUID()
        super.create(validate)
    }
}

/**
 * Demoes app-generated UUID ids. Note how [create] is overridden to auto-generate the ID, so that [save] works properly.
 */
data class LogRecord(override var id: UUID? = null, var text: String = "") : UuidEntity {
    companion object : Dao<LogRecord, UUID>(LogRecord::class.java)
}

/**
 * Tests all sorts of type mapping:
 * @property enumTest tests Java Enum mapping to native database enum mapping: https://github.com/mvysny/vok-orm/issues/12
 */
data class TypeMappingEntity(override var id: Long? = null,
                             var enumTest: MaritalStatus? = null
                             ) : KEntity<Long> {
    companion object : Dao<TypeMappingEntity, Long>(TypeMappingEntity::class.java)
}

private fun DynaNodeGroup.usingDockerizedPosgresql() {
    check(Docker.isPresent) { "Docker not available" }
    lateinit var container: PostgreSQLContainer<Nothing>
    beforeGroup {
        container = PostgreSQLContainer<Nothing>("postgres:10.3")
        container.start()
    }
    beforeGroup {
        val cfg = HikariConfig().apply {
            minimumIdle = 0
            maximumPoolSize = 30
            // stringtype=unspecified : see https://github.com/mvysny/vok-orm/issues/12 for more details.
            jdbcUrl = container.jdbcUrl.removeSuffix("loggerLevel=OFF") + "stringtype=unspecified"
            username = "test"
            password = "test"
        }
        JdbiOrm.setDataSource(HikariDataSource(cfg))
        db {
            ddl("""create table if not exists Test (
                id bigserial primary key,
                name varchar(400) not null,
                age integer not null,
                dateOfBirth date,
                created timestamp,
                modified timestamp,
                alive boolean,
                maritalStatus varchar(200)
                 )""")
            ddl("""CREATE INDEX pgweb_idx ON Test USING GIN (to_tsvector('english', name));""")
            ddl("""create table if not exists EntityWithAliasedId(myid bigserial primary key, name varchar(400) not null)""")
            ddl("""create table if not exists NaturalPerson(id varchar(10) primary key, name varchar(400) not null, bytes bytea not null)""")
            ddl("""create table if not exists LogRecord(id UUID primary key, text varchar(400) not null)""")
            ddl("""CREATE TYPE marital_status AS ENUM ('Single', 'Married', 'Widowed', 'Divorced')""")
            ddl("""CREATE TABLE IF NOT EXISTS TypeMappingEntity(id bigserial primary key, enumTest marital_status)""")
        }
        VokOrm.databaseVariant = DatabaseVariant.PostgreSQL
    }

    afterGroup { JdbiOrm.destroy() }
    afterGroup { container.stop() }

    fun clearDb() {
        Person.deleteAll()
        EntityWithAliasedId.deleteAll()
        NaturalPerson.deleteAll()
        LogRecord.deleteAll()
    }
    beforeEach { clearDb() }
    afterEach { clearDb() }
}

fun DynaNodeGroup.usingDockerizedMysql() {
    check(Docker.isPresent) { "Docker not available" }
    lateinit var container: MySQLContainer<Nothing>
    beforeGroup {
        container = MySQLContainer<Nothing>("mysql:5.7.21")
        container.start()
    }
    beforeGroup {
        val cfg = HikariConfig().apply {
            minimumIdle = 0
            maximumPoolSize = 30
            jdbcUrl = container.jdbcUrl
            username = "test"
            password = "test"
        }
        JdbiOrm.setDataSource(HikariDataSource(cfg))
        db {
            ddl("""create table if not exists Test (
                id bigint primary key auto_increment,
                name varchar(400) not null,
                age integer not null,
                dateOfBirth date,
                created timestamp(3) NULL,
                modified timestamp(3) NULL,
                alive boolean,
                maritalStatus varchar(200),
                FULLTEXT index (name)
                 )""")
            ddl("""create table if not exists EntityWithAliasedId(myid bigint primary key auto_increment, name varchar(400) not null)""")
            ddl("""create table if not exists NaturalPerson(id varchar(10) primary key, name varchar(400) not null, bytes binary(16) not null)""")
            ddl("""create table if not exists LogRecord(id binary(16) primary key, text varchar(400) not null)""")
            ddl("""create table TypeMappingEntity(id bigint primary key auto_increment, enumTest ENUM('Single', 'Married', 'Divorced', 'Widowed'))""")
        }
        VokOrm.databaseVariant = DatabaseVariant.MySQLMariaDB
    }

    afterGroup { JdbiOrm.destroy() }
    afterGroup { container.stop() }

    fun clearDb() {
        Person.deleteAll()
        EntityWithAliasedId.deleteAll()
        NaturalPerson.deleteAll()
        LogRecord.deleteAll()
        TypeMappingEntity.deleteAll()
    }
    beforeEach { clearDb() }
    afterEach { clearDb() }
}

fun DynaNodeGroup.usingH2Database() {
    beforeGroup {
        val cfg = HikariConfig().apply {
            jdbcUrl = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"
            username = "sa"
            password = ""
        }
        JdbiOrm.setDataSource(HikariDataSource(cfg))
    }

    afterGroup { JdbiOrm.destroy() }

    beforeEach {
        db {
            ddl("DROP ALL OBJECTS")
            ddl("""create table Test (
                id bigint primary key auto_increment,
                name varchar not null,
                age integer not null,
                dateOfBirth date,
                created timestamp,
                modified timestamp,
                alive boolean,
                maritalStatus varchar
                 )""")
            ddl("""create table EntityWithAliasedId(myid bigint primary key auto_increment, name varchar not null)""")
            ddl("""create table NaturalPerson(id varchar(10) primary key, name varchar(400) not null, bytes binary(16) not null)""")
            ddl("""create table LogRecord(id UUID primary key, text varchar(400) not null)""")
            ddl("""create table TypeMappingEntity(id bigint primary key auto_increment, enumTest ENUM('Single', 'Married', 'Divorced', 'Widowed'))""")
        }
        VokOrm.databaseVariant = DatabaseVariant.Unknown
    }
    afterEach {
        db { ddl("DROP ALL OBJECTS") }
    }
}

fun PersistenceContext.ddl(@Language("sql") sql: String) {
    handle.createUpdate(sql).execute()
}

private fun DynaNodeGroup.usingDockerizedMariaDB() {
    check(Docker.isPresent) { "Docker not available" }
    lateinit var container: MariaDBContainer<Nothing>
    beforeGroup {
        container = MariaDBContainer("mariadb:10.1.31")
        container.start()
    }
    beforeGroup {
        val cfg = HikariConfig().apply {
            minimumIdle = 0
            maximumPoolSize = 30
            jdbcUrl = container.jdbcUrl
            username = "test"
            password = "test"
        }
        JdbiOrm.setDataSource(HikariDataSource(cfg))
        db {
            ddl(
                """create table if not exists Test (
                id bigint primary key auto_increment,
                name varchar(400) not null,
                age integer not null,
                dateOfBirth date,
                created timestamp(3) NULL,
                modified timestamp(3) NULL,
                alive boolean,
                maritalStatus varchar(200),
                FULLTEXT index (name)
                 )"""
            )
            ddl("""create table if not exists EntityWithAliasedId(myid bigint primary key auto_increment, name varchar(400) not null)""")
            ddl("""create table if not exists NaturalPerson(id varchar(10) primary key, name varchar(400) not null, bytes binary(16) not null)""")
            ddl("""create table if not exists LogRecord(id binary(16) primary key, text varchar(400) not null)""")
            ddl("""create table TypeMappingEntity(id bigint primary key auto_increment, enumTest ENUM('Single', 'Married', 'Divorced', 'Widowed'))""")
        }
        VokOrm.databaseVariant = DatabaseVariant.MySQLMariaDB
    }

    afterGroup { JdbiOrm.destroy() }
    afterGroup { container.stop() }

    fun clearDb() {
        Person.deleteAll()
        EntityWithAliasedId.deleteAll()
        NaturalPerson.deleteAll()
        LogRecord.deleteAll()
    }
    beforeEach { clearDb() }
    afterEach { clearDb() }
}

fun DynaNodeGroup.withAllDatabases(block: DynaNodeGroup.()->Unit) {
    group("H2") {
        usingH2Database()
        block()
    }

    if (Docker.isPresent) {
        group("PostgreSQL 10.3") {
            usingDockerizedPosgresql()
            block()
        }

        group("MySQL 5.7.21") {
            usingDockerizedMysql()
            block()
        }

        group("MariaDB 10.1.31") {
            usingDockerizedMariaDB()
            block()
        }
    }
}
