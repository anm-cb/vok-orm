package com.github.vokorm

import com.github.mvysny.dynatest.DynaNodeGroup
import org.hibernate.validator.constraints.Length
import org.intellij.lang.annotations.Language
import java.time.Instant
import java.time.LocalDate
import java.util.*

/**
 * A test table that tests the most basic cases. The ID is auto-generated by the database.
 */
@Table("Test")
data class Person(
    override var id: Long? = null,
    @field:Length(min = 1)
    var name: String,
    var age: Int,
    @Ignore var ignored: String? = null,
    @Transient var ignored2: Any? = null,
    var dateOfBirth: LocalDate? = null,
    var created: Date? = null,
    var modified: Instant? = null,
    // test of aliased field
    @As("alive")
    var isAlive25: Boolean? = null,
    var maritalStatus: MaritalStatus? = null

) : Entity<Long> {
    override fun save(validate: Boolean) {
        if (id == null) {
            if (created == null) created = java.sql.Timestamp(System.currentTimeMillis())
            if (modified == null) modified = Instant.now()
        }
        super.save(validate)
    }

    // should not be persisted into the database since it's not backed by a field.
    fun getSomeComputedValue(): Int = age + 2

    // should not be persisted into the database since it's not backed by a field.
    val someOtherComputedValue: Int get() = age

    companion object : Dao<Person> {
        val IGNORE_THIS_FIELD: Int = 0
    }
}

enum class MaritalStatus {
    Single,
    Married,
    Divorced,
    Widowed
}

/**
 * Tests for https://github.com/mvysny/vok-orm/issues/7
 */
data class EntityWithAliasedId(
        @As("myid")
        override var id: Long? = null,
        var name: String
) : Entity<Long> {
    companion object : Dao<EntityWithAliasedId>
}

/**
 * A table demoing natural person with government-issued ID (birth number, social security number, etc).
 */
data class NaturalPerson(override var id: String? = null, var name: String, var bytes: ByteArray) : Entity<String> {
    companion object : Dao<NaturalPerson>
}

interface UuidEntity : Entity<UUID> {
    override fun create(validate: Boolean) {
        id = UUID.randomUUID()
        super.create(validate)
    }
}

/**
 * Demoes app-generated UUID ids. Note how [create] is overridden to auto-generate the ID, so that [save] works properly.
 *
 * Warning: do NOT add any additional fields in here, since that would mysteriously make the compiler generate
 * `void setId(UUID)` instead of `void setId(Object)` and we wouldn't test the metadata hook that fixes this issue.
 */
data class LogRecord(override var id: UUID? = null, var text: String) : UuidEntity {
    companion object : Dao<LogRecord>
}

private fun DynaNodeGroup.usingDockerizedPosgresql(databasePort: Int) {
    check(Docker.isPresent) { "Docker not available" }
    beforeGroup { Docker.startPostgresql(port = databasePort) }
    beforeGroup {
        VokOrm.dataSourceConfig.apply {
            minimumIdle = 0
            maximumPoolSize = 30
            jdbcUrl = "jdbc:postgresql://localhost:$databasePort/postgres"
            username = "postgres"
            password = "mysecretpassword"
        }
        VokOrm.init()
        db {
            ddl("""create table if not exists Test (
                id bigserial primary key,
                name varchar(400) not null,
                age integer not null,
                dateOfBirth date,
                created timestamp,
                modified timestamp,
                alive boolean,
                maritalStatus varchar(200)
                 )""")
            ddl("""create table if not exists EntityWithAliasedId(myid bigserial primary key, name varchar(400) not null)""")
            ddl("""create table if not exists NaturalPerson(id varchar(10) primary key, name varchar(400) not null, bytes bytea not null)""")
            ddl("""create table if not exists LogRecord(id UUID primary key, text varchar(400) not null)""")
        }
    }

    afterGroup { VokOrm.destroy() }
    afterGroup { Docker.stopPostgresql() }

    fun clearDb() {
        Person.deleteAll()
        EntityWithAliasedId.deleteAll()
        NaturalPerson.deleteAll()
        LogRecord.deleteAll()
    }
    beforeEach { clearDb() }
    afterEach { clearDb() }
}

fun DynaNodeGroup.usingDockerizedMysql(databasePort: Int) {
    check(Docker.isPresent) { "Docker not available" }
    beforeGroup { Docker.startMysql(port = databasePort) }
    beforeGroup {
        VokOrm.dataSourceConfig.apply {
            minimumIdle = 0
            maximumPoolSize = 30
            jdbcUrl = "jdbc:mysql://localhost:$databasePort/db"
            username = "testuser"
            password = "mysqlpassword"
        }
        VokOrm.init()
        db {
            ddl("""create table if not exists Test (
                id bigint primary key auto_increment,
                name varchar(400) not null,
                age integer not null,
                dateOfBirth date,
                created timestamp(3) NULL,
                modified timestamp(3) NULL,
                alive boolean,
                maritalStatus varchar(200)
                 )""")
            ddl("""create table if not exists EntityWithAliasedId(myid bigint primary key auto_increment, name varchar(400) not null)""")
            ddl("""create table if not exists NaturalPerson(id varchar(10) primary key, name varchar(400) not null, bytes binary(16) not null)""")
            ddl("""create table if not exists LogRecord(id binary(16) primary key, text varchar(400) not null)""")
        }
    }

    afterGroup { VokOrm.destroy() }
    afterGroup { Docker.stopMysql() }

    fun clearDb() {
        Person.deleteAll()
        EntityWithAliasedId.deleteAll()
        NaturalPerson.deleteAll()
        LogRecord.deleteAll()
    }
    beforeEach { clearDb() }
    afterEach { clearDb() }
}

fun DynaNodeGroup.usingH2Database() {
    beforeGroup {
        VokOrm.dataSourceConfig.apply {
            jdbcUrl = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"
            username = "sa"
            password = ""
        }
        VokOrm.init()
    }

    afterGroup { VokOrm.destroy() }

    beforeEach {
        db {
            ddl("DROP ALL OBJECTS")
            ddl("""create table Test (
                id bigint primary key auto_increment,
                name varchar not null,
                age integer not null,
                dateOfBirth date,
                created timestamp,
                modified timestamp,
                alive boolean,
                maritalStatus varchar
                 )""")
            ddl("""create table EntityWithAliasedId(myid bigint primary key auto_increment, name varchar not null)""")
            ddl("""create table NaturalPerson(id varchar(10) primary key, name varchar(400) not null, bytes binary(16) not null)""")
            ddl("""create table LogRecord(id UUID primary key, text varchar(400) not null)""")
        }
    }
    afterEach {
        db { ddl("DROP ALL OBJECTS") }
    }
}

fun PersistenceContext.ddl(@Language("sql") sql: String) {
    con.createQuery(sql).executeUpdate()
}

private fun DynaNodeGroup.usingDockerizedMariaDB(databasePort: Int) {
    check(Docker.isPresent) { "Docker not available" }
    beforeGroup { Docker.startMariaDB(port = databasePort) }
    beforeGroup {
        VokOrm.dataSourceConfig.apply {
            minimumIdle = 0
            maximumPoolSize = 30
            jdbcUrl = "jdbc:mariadb://localhost:$databasePort/db"
            username = "testuser"
            password = "mysqlpassword"
        }
        VokOrm.init()
        db {
            ddl(
                """create table if not exists Test (
                id bigint primary key auto_increment,
                name varchar(400) not null,
                age integer not null,
                dateOfBirth date,
                created timestamp(3) NULL,
                modified timestamp(3) NULL,
                alive boolean,
                maritalStatus varchar(200)
                 )"""
            )
            ddl("""create table if not exists EntityWithAliasedId(myid bigint primary key auto_increment, name varchar(400) not null)""")
            ddl("""create table if not exists NaturalPerson(id varchar(10) primary key, name varchar(400) not null, bytes binary(16) not null)""")
            ddl("""create table if not exists LogRecord(id binary(16) primary key, text varchar(400) not null)""")
        }
    }

    afterGroup { VokOrm.destroy() }
    afterGroup { Docker.stopMariaDB() }

    fun clearDb() {
        Person.deleteAll()
        EntityWithAliasedId.deleteAll()
        NaturalPerson.deleteAll()
        LogRecord.deleteAll()
    }
    beforeEach { clearDb() }
    afterEach { clearDb() }
}

fun DynaNodeGroup.withAllDatabases(block: DynaNodeGroup.()->Unit) {
    group("H2") {
        usingH2Database()
        block()
    }

    if (Docker.isPresent) {
        group("PostgreSQL 10.3") {
            usingDockerizedPosgresql(12345)
            block()
        }

        group("MySQL 5.7.21") {
            usingDockerizedMysql(12346)
            block()
        }

        group("MariaDB 10.1.31") {
            usingDockerizedMariaDB(12347)
            block()
        }
    }
}
